正则表达式基础

在正则表达式中，如果直接给出字符，就是精确匹配。
^       匹配行道
$       匹配行尾   ^abc$ 匹配只有abc的那一行
*       匹配前面的子表达式零次或多次   'ab*' 能匹配 'a' 以及 'abb'。* 等价于{0,}
+       匹配前面的子表达式一次或多次   'ab+' 能匹配 'ab' 以及 'abb' 但不能匹配 a + 等价于 {1,}\
?       匹配前面的子表达式零次或一次。例如，'do(es)?' 可以匹配 'do' 或 'does' 。? 等价于 {0,1}  
当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。
例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。

{n}	    n是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" ，但是能匹配 "food"
{n,}	n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 但能匹配 "foooood" 。
{n,m}   m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 。逗号和两个数之间不能有空格。
.       可以匹配一个字符(一定会有一个字符) 'py.' 可以匹配  pyc py3 py!

\b      匹配一个单词边界，也就是指单词和空格间的位置  'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'
\B      匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'
\d      匹配一个数字
\D      匹配一个非数字字符。等价于 [^0-9]。
\w      匹配一个字母或数字包含下划线_
\W      匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'
\s      匹配一个空格（也包括Tab等空白符）
\cx     匹配由 x 指明的控制字符。例如， \cM 匹配一个 Ctrl+M 或回车符。x 的值必须为 A-Z 或 a-z 之一。
\f      匹配一个换页符
\v      匹配一个垂直制表符
x|y     匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"
[abc]   字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'
[^abc]  负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'、'l'、'i'、'n'。
[A-Z]
[0-9]
[a-z]   字符范围。匹配指定范围内的任意字符。
[^a-z]  负值字符范围。匹配任何不在指定范围内的任意字符
\xn     匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码
\num    匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。
\n      标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。
\nm     标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 
        m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。
\nml    如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml
\un     匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。


运算符优先级
\                   转义符
(), (?:), (?=), []  圆括号与方括号
*, +, ?, {n}, {n,}, {n,m} 限定符
*, +, ?, {n}, {n,}, {n,m} 定位点和序列（位置和顺序)
|                   替换，"或"操作
                    字符具有高于替换运算符的优先级，使得"m|food"匹配"m"或"food"。
                    若要匹配"mood"或"food"，请使用括号创建子表达式，从而产生"(m|f)ood"。
